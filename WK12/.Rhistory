}
}
ggplot(dx,aes(x=as.factor(hnodes),y=err.val,shape=err.type,colour=nulls))+geom_point()+facet_wrap(~n)
head(dfTmp)
summary(dfTmp[,5]==500)
summary(dfTmp[dfTmp[,5]==500])
summary(dfTmp[dfTmp[,5]==500],)
f =dfTmp[dfTmp$ns==500,]
f
f =dfTmp[dfTmp$n==500,]
summary(f)
nrow(f)
f$hnodes=as.factor(f$hnodes)
f$nulls=as.factor(f$nulls)
summary(f)
f
dx <- gather(dfTmp, err.type, err.val, train.err:test.err, factor_key=TRUE)
dx
ggplot(dx,aes(x=as.factor(hnodes),y=err.val,shape=err.type,colour=n))+geom_point()+facet_wrap(~nulls)
bTrain <- sample(c(FALSE,TRUE),nrow(dbaDat),replace=TRUE)
train <- dbaDat[bTrain,]
test <- dbaDat[!bTrain,]
dbaDat <- read.table("data_banknote_authentication.txt",sep=",")
colnames(dbaDat) <- c("var","skew","curt","entr","auth")
dbaDat$auth <- factor(dbaDat$auth)
bTrain <- sample(c(FALSE,TRUE),nrow(dbaDat),replace=TRUE)
train <- dbaDat[bTrain,]
test <- dbaDat[!bTrain,]
head(test)
nn$result.matrix
nn$response
ce <- numeric(6)
ce
for (i in 1:6){
nn <- neuralnet(auth~var+skew+curt,data=train,hidden=i)
cm <- as.matrix(table(dbaDat[!bTrain,"auth"],compute(nn, test[,-5])$response))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
ce <- numeric(6)
for (i in 1:6){
nn <- neuralnet(as.numeric(auth)~var+skew+curt,data=train,hidden=i)
cm <- as.matrix(table(dbaDat[!bTrain,"auth"],compute(nn, test[,-5])$response))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
dbaDat <- read.table("data_banknote_authentication.txt",sep=",")
colnames(dbaDat) <- c("var","skew","curt","entr","auth")
bTrain <- sample(c(FALSE,TRUE),nrow(dbaDat),replace=TRUE)
train <- dbaDat[bTrain,]
test <- dbaDat[!bTrain,]
ce <- numeric(6)
for (i in 1:6){
nn <- neuralnet((auth)~var+skew+curt,data=train,hidden=i)
cm <- as.matrix(table(dbaDat[!bTrain,"auth"],compute(nn, test[,-5])$response))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
compute(nn, test[,-5])$response)
compute(nn, test[,-5])$response
compute(nn, test)$response
f<-is.na(test)
f
f<-test[is.na(test)]
f
compute(nn, test)
nn
compute(nn, test[,1:4])
test[,1:4]
compute(nn, test[,1:4])
compute(nn, train[,1:4])
ce <- numeric(6)
for (i in 1:1){
nn <- neuralnet((auth)~var+skew+curt,data=train,hidden=i)
cm <- as.matrix(table(dbaDat[!bTrain,"auth"],compute(nn, test[,-5])$response))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
ce <- numeric(6)
for (i in 1:1){
nn <- neuralnet((auth)~var+skew+curt,err.fct="SSE",data=train,hidden=i)
cm <- as.matrix(table(dbaDat[!bTrain,"auth"],compute(nn, test[,-5])$response))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
for (i in 1:1){
nn <- neuralnet(auth~var+skew+curt,err.fct="sse",data=train,hidden=i)
cm <- as.matrix(table(dbaDat[!bTrain,"auth"],compute(nn, test[,-5])$response))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
ce <- numeric(6)
for (i in 1:1){
nn <- neuralnet(auth~var+skew+curt,err.fct="sse",data=train,hidden=i)
c <- compute(nn, test[,-5])$response))
}
ce <- numeric(6)
for (i in 1:1){
nn <- neuralnet(auth~var+skew+curt,err.fct="sse",data=train,hidden=i)
c <- compute(nn, test[,-5])$response
}
ce <- numeric(6)
for (i in 1:1){
nn <- neuralnet(auth~var+skew+curt,err.fct="sse",data=train,hidden=i)
c <- compute(nn, test)$response
}
dbaDat$auth<-as.numeric(dbaDat$auth)
bTrain <- sample(c(FALSE,TRUE),nrow(dbaDat),replace=TRUE)
train <- dbaDat[bTrain,]
test <- dbaDat[!bTrain,]
ce <- numeric(6)
for (i in 1:1){
nn <- neuralnet(auth~var+skew+curt,err.fct="sse",data=train,hidden=i)
c <- compute(nn, test)$response
}
names(test)
ce <- numeric(6)
for (i in 1:1){
nn <- neuralnet(auth~var+skew+curt,err.fct="sse",data=train,hidden=i)
c <- compute(nn, test[,1:4])$response
}
ce <- numeric(6)
for (i in 1:1){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=i)
c <- compute(nn, test[,1:4])$response
}
ce <- numeric(6)
for (i in 1:1){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=i)
cm <- as.matrix(table(dbaDat[!bTrain,"auth"],compute(nn, test[,-5])$response))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
ce <- numeric(6)
for (i in 1:1){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=i)
cm <- table(dbaDat[!bTrain,"auth"],compute(nn, test[,-5])$response)
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
ce <- numeric(6)
for (i in 1:1){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=i)
cm <- as.matrix(table(test[!bTrain,"auth"],compute(nn, test[,-5])$response))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
ce <- numeric(6)
for (i in 1:1){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=i)
cm <- as.matrix(table(test$auth,compute(nn, test[,-5])$response))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
compute(nn, test[,-5])$response)
length(compute(nn, test[,-5])$response)
nrow(compute(nn, test[,-5])$response)
dim(compute(nn, test[,-5])$response)
(compute(nn, test[,-5])$response)
compute(nn, test[,-5])$response
ce <- numeric(6)
for (i in 1:6){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=i)
cm <- as.matrix(table(test$auth,compute(nn, test[,-5])$response))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
compute(nn, test[,-5])$response
nn
ce <- numeric(6)
for (i in 1:6){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=i)
cm <- as.matrix(table(test$auth,compute(nn, test[,1:4])$response))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
test
compute(nn, test[,1:4])
compute(nn, test[,1:4])$response
m<-compute(nn, test[,1:4])
m$net.result
summary(m)
round(m$net.result)
ce <- numeric(6)
for (i in 1:6){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=i)
cm <- as.matrix(table(test$auth,round(compute(nn, test[,1:4])$net.result))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
ce <- numeric(6)
for (i in 1:6){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=i)
cm <- as.matrix(table(test$auth,round(compute(nn, test[,1:4])$net.result)))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
plot(ce)
ce
f <- neuralnet(auth~var+skew+curt+entr,data=train, hidden=4)
table(test$auth,round(compute(f,test[,1:4])$net.result))
compute(nn, test[,1:4])$net.result
dbaDat$auth<-as.numeric(factor(dbaDat$auth))
bTrain <- sample(c(FALSE,TRUE),nrow(dbaDat),replace=TRUE)
train <- dbaDat[bTrain,]
test <- dbaDat[!bTrain,]
ce <- numeric(6)
for (i in 1:6){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=i)
cm <- as.matrix(table(test$auth,round(compute(nn, test[,1:4])$net.result)))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
ce
dbaDat$auth<-as.numeric(dbaDat$auth)
bTrain <- sample(c(FALSE,TRUE),nrow(dbaDat),replace=TRUE)
train <- dbaDat[bTrain,]
test <- dbaDat[!bTrain,]
ce <- numeric(6)
for (i in 1:6){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=i)
cm <- as.matrix(table(test$auth,round(compute(nn, test[,1:4])$net.result)))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
ce
plot(ce)
cm
1-(sum(diag(cm))/sum(cm))
(sum(diag(cm))/sum(cm))
summary(f)
dddd=round(compute(nn, test[,1:4])$net.result))
dddd=round(compute(nn, test[,1:4])$net.result)
summary(dddd)
summary(dbaDat$auth)
ce <- numeric(6)
for (i in 1:6){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=i)
cm <- as.matrix(table(test$auth,1+(compute(nn, test[,1:4])$net.result>1.5)))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
plot(ce)
ce
summary(dbaDat$auth)
cm
nj <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=4)
table(test$auth,1+(compute(nj, test[,1:4]))
)
table(test$auth,1+(compute(nj, test[,1:4])>1.5)
)
table(test$auth,1+(compute(nj, test[,1:4])>1.5))
table(test$auth,(compute(nj, test[,1:4])>1.5))
compute(nj, test[,1:4])
compute(nj, test[,1:4])>1.5
compute(nj, test[,1:4])>1.50
compute(nj, test[,1:4])$net.result>1.50
table(test$auth,1+(compute(nn, test[,1:4])$net.result>1.5))
nj <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=4)
compute(nn, test[,1:4])
summary(compute(nn, test[,1:4]))
summary(compute(nn, test[,1:4])$net.result)
table(test$auth,1+(compute(nj, test[,1:4])$net.result>1.5))
cm <- table(test$auth,1+(compute(nj, test[,1:4])$net.result>1.5))
1-(sum(diag(cm))/sum(cm))
err<-1-(sum(diag(cm))/sum(cm))
tk1 <- knn(train,test,k=2,cl=cls[bTrain])
library(e1071)
tk1 <- knn(train,test,k=2,cl=cls[bTrain])
library(class)
tk1 <- knn(train,test,k=2,cl=cls[bTrain])
cls <- as.factor(dbaDat$auth)
tk1 <- knn(train,test,k=2,cl=cls[bTrain])
cm <- as.matrix(table(dbaDat[!bTrain,5],tk1))
err<-1-(sum(diag(cm))/sum(cm))
err
libarary(e1071)
library(e1071)
svm5 <-  svm(auth~var+skew+curt+entr, data=train, kernel="polynomial", gamma=.2,
cost =20)
c<-predict(svm5,test[,-5])
c
svm5 <-  svm(factor(auth)~var+skew+curt+entr, data=train, kernel="polynomial", gamma=.2,
cost =20)
c<-predict(svm5,test[,-5])
c
cm <- as.matrix(table(dbaDat[!bTrain,5], c))
err<-1-(sum(diag(cm))/sum(cm))
err
library(e1071)
library(class)
testError <- function(truth, predicted){
cm <- table(truth,predicted)
1-(sum(diag(cm))/sum(cm))
}
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=4)
nn.err <- testError(test$auth,1+(compute(nm, test[,1:4])$net.result>1.5))
km <- knn(train,test,k=2,cl=cls[bTrain])
kn.err <- testError(test$auth,km)
svm <- svm(as.factor(auth)~var+skew+curt+entr, data=train, kernel="polynomial", gamma=.2,
cost =20)
svm.err <- testError(test$auth,predict(svm5,test[,-5]))
kable(data.frame(nn.err, kn.err, svm.err))
library(knitr)
kable(data.frame(nn.err, kn.err, svm.err))
rep(1)
rep(2)
seq(1)
seq(1,2)
seq(1,1)
numeric(1)
rep(1,2)
class(rep(1,2))
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(1,2))
ce <- numeric(6)
for (i in 1:6){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(1,i))
cm <- as.matrix(table(test$auth,1+(compute(nn, test[,1:4])$net.result>1.5)))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
plot(ce, xlab="Hidden Layers")
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=4)
nn.err <- testError(test$auth,1+(compute(nm, test[,1:4])$net.result>1.5))
plot(nm)
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=c(1,4))
plot(nm)
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=c(1,1,1,1))
plot(nm)
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=c(4,4,4,4))
plot(nm)
ce <- numeric(6)
for (i in 1:6){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(4,i))
cm <- as.matrix(table(test$auth,1+(compute(nn, test[,1:4])$net.result>1.5)))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
plot(ce, xlab="Hidden Layers")
which.min(ce)
ce <- numeric(6)
for (i in 1:6){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(1,i))
cm <- as.matrix(table(test$auth,1+(compute(nn, test[,1:4])$net.result>1.5)))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
plot(ce, xlab="Hidden Layers")
which.min(ce)
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(1,5))
nn.err <- testError(test$auth,1+(compute(nm, test[,1:4])$net.result>1.5))
plot(nm)
kable(data.frame(nn.err, kn.err, svm.err))
ce <- numeric(6)
for (i in 1:6){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(4,i))
cm <- as.matrix(table(test$auth,1+(compute(nn, test[,1:4])$net.result>1.5)))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
plot(ce, xlab="Hidden Layers")
which.min(ce)
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(4,6))
nn.err <- testError(test$auth,1+(compute(nm, test[,1:4])$net.result>1.5))
kable(data.frame(nn.err, kn.err, svm.err))
#Using 4 nodes per hidden layer, as 4 nodes performed the best previously
ce <- numeric(10)
for (i in 1:10){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(4,i))
cm <- as.matrix(table(test$auth,1+(compute(nn, test[,1:4])$net.result>1.5)))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
plot(ce, xlab="Hidden Layers")
which.min(ce)
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(4,2))
nn.err <- testError(test$auth,1+(compute(nm, test[,1:4])$net.result>1.5))
kable(data.frame(nn.err, kn.err, svm.err))
set.seed(1234)
bTrain <- sample(c(FALSE,TRUE),nrow(dbaDat),replace=TRUE)
train <- dbaDat[bTrain,]
test <- dbaDat[!bTrain,]
#Using 4 nodes per hidden layer, as 4 nodes performed the best previously
ce <- numeric(10)
for (i in 1:10){
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(4,i))
cm <- as.matrix(table(test$auth,1+(compute(nn, test[,1:4])$net.result>1.5)))
ce[i] <- 1-(sum(diag(cm))/sum(cm))
}
plot(ce, xlab="Hidden Layers")
which.min(ce)
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(4,5))
nn.err <- testError(test$auth,1+(compute(nm, test[,1:4])$net.result>1.5))
plot(nm)
km <- knn(train,test,k=2,cl=cls[bTrain])
kn.err <- testError(test$auth,km)
svm <- svm(as.factor(auth)~var+skew+curt+entr, data=train, kernel="polynomial", gamma=.2,
cost =20)
svm.err <- testError(test$auth,predict(svm5,test[,-5]))
#Testing against best performing KNN and SVM models from Week 11
kable(data.frame(nn.err, kn.err, svm.err))
set.seed(1234)
#Using 4 nodes per hidden layer, as 4 nodes performed the best previously
dfTmp <- NULL
for (i in 1:10){
for (j in 1:10){
bTrain <- sample(c(FALSE,TRUE),nrow(dbaDat),replace=TRUE)
train <- dbaDat[bTrain,]
test <- dbaDat[!bTrain,]
nn <- neuralnet(auth~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(4,i))
cm <- as.matrix(table(test$auth,1+(compute(nn, test[,1:4])$net.result>1.5)))
dfTmp <- rbind(dfTmp, data.frame(i,err= 1-(sum(diag(cm))/sum(cm))))
}
}
boxplot(err~i data=dfTmp, xlab="Hidden Layers")
boxplot(err~i, data=dfTmp, xlab="Hidden Layers")
dfTmp %>% group_by(i) %>% summarise(err)
library(dplyr)
dfTmp %>% group_by(i) %>% summarise(err)
group_by(data=dfTmp,i) %>% summarise(err)
dfTmp %>% group_by(i) %>% summarise(mean(err)=me)
head(dfTmp)
dfTmp %>% group_by(i) %>% summarize(mean=mean(err))
dfTmp %>% group_by(i) %>% summarize(mean=mean(err),sd=sd(err))
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(4,2))
nn.err <- testError(test$auth,1+(compute(nm, test[,1:4])$net.result>1.5))
plot(nm)
km <- knn(train,test,k=2,cl=cls[bTrain])
kn.err <- testError(test$auth,km)
svm <- svm(as.factor(auth)~var+skew+curt+entr, data=train, kernel="polynomial", gamma=.2,
cost =20)
svm.err <- testError(test$auth,predict(svm5,test[,-5]))
#Testing against best performing KNN and SVM models from Week 11
kable(data.frame(nn.err, kn.err, svm.err))
#The performance of the neuralnet seems highly variable to the initial seed provided. However, on this test set nn and knn performed equally well
library(e1071)
library(class)
set.seed(1234)
bTrain <- sample(c(FALSE,TRUE),nrow(dbaDat),replace=TRUE)
train <- dbaDat[bTrain,]
test <- dbaDat[!bTrain,]
#Test misclassifcation rates
testError <- function(truth, predicted){
cm <- table(truth,predicted)
1-(sum(diag(cm))/sum(cm))
}
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(4,2))
nn.err <- testError(test$auth,1+(compute(nm, test[,1:4])$net.result>1.5))
plot(nm)
km <- knn(train,test,k=2,cl=cls[bTrain])
kn.err <- testError(test$auth,km)
svm <- svm(as.factor(auth)~var+skew+curt+entr, data=train, kernel="polynomial", gamma=.2,
cost =20)
svm.err <- testError(test$auth,predict(svm5,test[,-5]))
#Testing against best performing KNN and SVM models from Week 11
kable(data.frame(nn.err, kn.err, svm.err))
#The performance of the neuralnet seems highly variable to the initial seed provided. However, on this test set nn and knn performed equally well
test
head(test)
nn.err <- testError(test$auth,1+(compute(nm, test[,1:4])$net.result>1.5))
nn.err <- testError(test$auth,
1+(compute(nn, test[,1:4])$net.result>1.5))
plot(nm)
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(4,2))
nn.err <- testError(test$auth,
1+(compute(nm, test[,1:4])$net.result>1.5))
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(4,2))
set.seed(1234)
bTrain <- sample(c(FALSE,TRUE),nrow(dbaDat),replace=TRUE)
train <- dbaDat[bTrain,]
test <- dbaDat[!bTrain,]
nn.err <- testError(test$auth,
1+(compute(nm, test[,1:4])$net.result>1.5))
nn.err <- testError(test$auth,
1+(compute(nm, test[,-5])$net.result>1.5))
compute(nm, test[,-5])
compute(nn, test[,-5])
class(nm)
class(nn)
testError <- function(truth, predicted){
cm <- as.matrix(table(truth,predicted))
1-(sum(diag(cm))/sum(cm))
}
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(4,2))
nn.err <- testError(test$auth,
1+(compute(nm, test[,-5])$net.result>1.5))
plot(nm)
km <- knn(train,test,k=2,cl=cls[bTrain])
kn.err <- testError(test$auth,km)
ggplot(dx,aes(x=as.factor(hnodes),y=err.val,shape=err.type,colour=n))+geom_point()+facet_wrap(~nulls)
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(4,2))
nn.err <- testError(test$auth,
1+(compute(nm, test[,-5])$net.result>1.5))
plot(nm)
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(4,2))
nn.err <- testError(test$auth,
1+(compute(nm, test[,-5])$net.result>1.5))
plot(nm)
nn.err <- testError(test$auth,
1+(compute(nm, test[,-5])$net.result>1.5))
nn.err <- testError(test$auth,
1+(compute(nm, test[,1:4])$net.result>1.5))
detach(dplyr)
detach("package:dplyr", unload=TRUE)
nm <- neuralnet(as.numeric(factor(auth))~var+skew+curt+entr,err.fct="sse",data=train,hidden=rep(4,2))
nn.err <- testError(test$auth,
1+(compute(nm, test[,1:4])$net.result>1.5))
plot(nm)
km <- knn(train,test,k=2,cl=cls[bTrain])
kn.err <- testError(test$auth,km)
svm <- svm(as.factor(auth)~var+skew+curt+entr, data=train, kernel="polynomial", gamma=.2,
cost =20)
svm.err <- testError(test$auth,predict(svm5,test[,-5]))
#Testing against best performing KNN and SVM models from Week 11
kable(data.frame(nn.err, kn.err, svm.err))
#The performance of the neuralnet seems highly variable to the initial seed provided, similar to KNN. However, on this test set nn and knn performed equally well with SVM performing slightly worse
```
d <- dbaDat[,c(1,2,5)]
svmfit <- svm(auth~var+skew, data=d, kernel="radial", gamma=1,
cost =1)
plot(svmfit,d)
#Gamma 0.01
svm1 <-  svm(auth~var+skew, data=d, kernel="radial", gamma=.01,
cost =1)
plot(svm1, d)
#Gamma 100
svm2 <-  svm(auth~var+skew, data=d, kernel="radial", gamma=100,
cost =1)
plot(svm2, d)
plot(svmfit,d)
set.seed(1)
svm.radial.model <- svm(auth~., data=dbaDat[gTrain,], kernel="radial", cost=5, gamma=.05)
svm.radial.model <- svm(auth~., data=dbaDat[bTrain,], kernel="radial", cost=5, gamma=.05)
plot(svm.radial.model)
